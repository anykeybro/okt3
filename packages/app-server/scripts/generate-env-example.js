#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/generate-env-example.js [--output=path]
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å TypeScript)
const envRulesPath = path.join(__dirname, '../dist/config/env-validator.js');

if (!fs.existsSync(envRulesPath)) {
  console.error('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: yarn build');
  process.exit(1);
}

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const args = process.argv.slice(2);
const outputArg = args.find(arg => arg.startsWith('--output='));
const outputPath = outputArg 
  ? outputArg.split('=')[1] 
  : path.join(__dirname, '../../../../.env.example');

console.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ .env —Ñ–∞–π–ª–∞...');
console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputPath}`);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
let envRules;
try {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
  const originalConsole = console.log;
  const originalError = console.error;
  const originalWarn = console.warn;
  console.log = () => {};
  console.error = () => {};
  console.warn = () => {};
  
  delete require.cache[envRulesPath];
  envRules = require(envRulesPath);
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
  console.log = originalConsole;
  console.error = originalError;
  console.warn = originalWarn;
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
  process.exit(1);
}

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const categories = {
  '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': ['DATABASE_URL', 'DB_MAX_POOL_SIZE', 'DB_TIMEOUT'],
  '–°–µ—Ä–≤–µ—Ä': ['PORT', 'HOST', 'NODE_ENV', 'CORS_ORIGIN'],
  'JWT': ['JWT_SECRET', 'JWT_EXPIRES_IN', 'JWT_REFRESH_EXPIRES_IN'],
  'Kafka': ['KAFKA_BROKERS', 'KAFKA_CLIENT_ID', 'KAFKA_GROUP_ID'],
  'Telegram': ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_WEBHOOK_URL'],
  'SMS Gateway': ['SMS_GATEWAY_IP', 'SMS_GATEWAY_USERNAME', 'SMS_GATEWAY_PASSWORD', 'SMS_GATEWAY_PORT'],
  'Robokassa': ['ROBOKASSA_MERCHANT_ID', 'ROBOKASSA_PASSWORD1', 'ROBOKASSA_PASSWORD2', 'ROBOKASSA_TEST_MODE'],
  'Yandex Maps': ['YANDEX_MAPS_API_KEY'],
  '–ë–∏–ª–ª–∏–Ω–≥': ['BILLING_CHECK_INTERVAL', 'BILLING_AUTO_BLOCK', 'DEFAULT_BLOCK_THRESHOLD'],
  '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': ['BCRYPT_ROUNDS', 'RATE_LIMIT_WINDOW', 'RATE_LIMIT_MAX'],
  'MikroTik': ['MIKROTIK_DEFAULT_PORT', 'MIKROTIK_DEFAULT_TIMEOUT', 'MIKROTIK_HEALTH_CHECK_INTERVAL', 'MIKROTIK_MAX_RETRIES', 'MIKROTIK_RETRY_DELAY'],
  '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥': ['ZABBIX_URL', 'GRAFANA_URL', 'HEALTH_CHECK_INTERVAL', 'METRICS_RETENTION_DAYS'],
  '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ': ['LOG_LEVEL', 'LOG_MAX_FILES', 'LOG_MAX_SIZE', 'LOG_ENABLE_CONSOLE', 'LOG_ENABLE_FILE', 'LOG_DIRECTORY', 'AUDIT_RETENTION_DAYS'],
  'Dashboard': ['DASHBOARD_CACHE_TTL', 'DASHBOARD_CACHE_CLEANUP_INTERVAL', 'DASHBOARD_MAX_ACTIVITY', 'DASHBOARD_MAX_TOP_CLIENTS', 'DASHBOARD_MAX_LOW_BALANCE', 'DASHBOARD_LOW_BALANCE_THRESHOLD', 'DASHBOARD_MAX_DATE_RANGE_DAYS'],
  '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': ['NOTIFICATION_RETRY_ATTEMPTS', 'NOTIFICATION_RETRY_DELAY'],
};

// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
let content = `# –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è OK-Telecom Billing System
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env.development –∏–ª–∏ .env.production –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è

`;

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const allRules = [];
try {
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
  const validator = require(envRulesPath);
  if (validator.envRules) {
    allRules.push(...validator.envRules);
  }
} catch (error) {
  console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è');
}

// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
if (allRules.length === 0) {
  console.warn('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
  
  // –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const basicVars = [
    { name: 'DATABASE_URL', required: true, description: 'URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB' },
    { name: 'JWT_SECRET', required: true, description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT' },
    { name: 'TELEGRAM_BOT_TOKEN', required: true, description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞' },
    { name: 'SMS_GATEWAY_IP', required: true, description: 'IP –∞–¥—Ä–µ—Å SMS —à–ª—é–∑–∞' },
    { name: 'ROBOKASSA_MERCHANT_ID', required: true, description: 'ID –º–µ—Ä—á–∞–Ω—Ç–∞ Robokassa' },
    { name: 'YANDEX_MAPS_API_KEY', required: true, description: 'API –∫–ª—é—á Yandex Maps' },
  ];
  
  allRules.push(...basicVars);
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª –ø–æ –∏–º–µ–Ω–∏
const rulesIndex = {};
allRules.forEach(rule => {
  rulesIndex[rule.name] = rule;
});

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
Object.entries(categories).forEach(([categoryName, varNames]) => {
  content += `# ${categoryName}\n`;
  
  varNames.forEach(varName => {
    const rule = rulesIndex[varName];
    if (rule) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
      if (rule.description) {
        content += `# ${rule.description}\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (rule.required) {
        content += `# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      let value = '';
      if (rule.defaultValue !== undefined) {
        value = rule.defaultValue.toString();
      } else if (rule.required) {
        // –î–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º placeholder
        switch (rule.type) {
          case 'url':
            value = 'https://example.com';
            break;
          case 'email':
            value = 'user@example.com';
            break;
          case 'string':
            if (varName.includes('PASSWORD') || varName.includes('SECRET') || varName.includes('TOKEN')) {
              value = 'your_secret_value_here';
            } else {
              value = 'your_value_here';
            }
            break;
          case 'number':
            value = '0';
            break;
          case 'boolean':
            value = 'false';
            break;
          default:
            value = 'your_value_here';
        }
      }
      
      content += `${varName}=${value}\n\n`;
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
      content += `${varName}=\n\n`;
    }
  });
  
  content += '\n';
});

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
try {
  fs.writeFileSync(outputPath, content, 'utf8');
  console.log('‚úÖ –ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log(`üìÑ –§–∞–π–ª: ${outputPath}`);
  console.log('');
  console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ .env.development –∏–ª–∏ .env.production');
  console.log('2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é: yarn workspace app-server validate-env');
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
  process.exit(1);
}