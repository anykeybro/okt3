import { Kafka, Producer, Consumer, Partitioners, logLevel } from 'kafkajs';

class KafkaService {
  private kafka: Kafka;
  private producer: Producer | null = null;
  private consumer: Consumer | null = null;

  constructor() {
    const brokers = process.env.KAFKA_BROKERS?.split(',') || ['localhost:29092'];
    const clientId = process.env.KAFKA_CLIENT_ID || 'app-server';

    this.kafka = new Kafka({
      clientId,
      brokers,
      logLevel: logLevel.WARN, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
      retry: {
        initialRetryTime: 300,
        retries: 5,
        maxRetryTime: 30000,
        restartOnFailure: async () => true
      },
      connectionTimeout: 10000,
      requestTimeout: 30000
    });
  }

  async connectProducer(): Promise<void> {
    try {
      this.producer = this.kafka.producer({
        createPartitioner: Partitioners.LegacyPartitioner, // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–µ—Ä–µ
        maxInFlightRequests: 1,
        idempotent: false,
        transactionTimeout: 30000
      });
      await this.producer.connect();
      console.log('‚úÖ Kafka Producer –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Kafka Producer:', error);
      throw error;
    }
  }

  async connectConsumer(groupId?: string): Promise<void> {
    try {
      const consumerGroupId = groupId || process.env.KAFKA_GROUP_ID || 'app-server-group';
      this.consumer = this.kafka.consumer({ 
        groupId: consumerGroupId,
        sessionTimeout: 30000,
        rebalanceTimeout: 60000,
        heartbeatInterval: 3000,
        maxBytesPerPartition: 1048576,
        minBytes: 1,
        maxBytes: 10485760,
        maxWaitTimeInMs: 5000,
        retry: {
          initialRetryTime: 100,
          retries: 8
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.consumer.on('consumer.connect', () => {
        console.log('üîó Kafka Consumer –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
      });
      
      this.consumer.on('consumer.disconnect', () => {
        console.log('üîå Kafka Consumer –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
      });
      
      this.consumer.on('consumer.group_join', (event) => {
        console.log('üë• Consumer –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ:', event.payload.groupId);
      });

      await this.consumer.connect();
      console.log('‚úÖ Kafka Consumer –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Kafka Consumer:', error);
      throw error;
    }
  }

  async sendMessage(topic: string, message: any): Promise<void> {
    if (!this.producer) {
      throw new Error('Producer –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    try {
      await this.producer.send({
        topic,
        messages: [
          {
            value: JSON.stringify(message),
            timestamp: Date.now().toString()
          }
        ]
      });
      console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ ${topic}:`, message);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ ${topic}:`, error);
      throw error;
    }
  }

  async subscribeToTopic(topic: string, callback: (message: any) => void): Promise<void> {
    if (!this.consumer) {
      throw new Error('Consumer –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    try {
      await this.consumer.subscribe({ 
        topic, 
        fromBeginning: false // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ false, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      });
      
      await this.consumer.run({
        eachMessage: async ({ topic, partition, message, heartbeat }) => {
          try {
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await heartbeat();
            
            const messageValue = message.value?.toString();
            if (messageValue) {
              const parsedMessage = JSON.parse(messageValue);
              console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞ ${topic} (partition ${partition}):`, parsedMessage);
              callback(parsedMessage);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞ ${topic}:`, error);
          }
        },
      });
      
      console.log(`üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ ${topic} –∞–∫—Ç–∏–≤–Ω–∞`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ ${topic}:`, error);
      throw error;
    }
  }

  async disconnect(): Promise<void> {
    try {
      if (this.producer) {
        await this.producer.disconnect();
        console.log('üîå Kafka Producer –æ—Ç–∫–ª—é—á–µ–Ω');
      }
      if (this.consumer) {
        await this.consumer.disconnect();
        console.log('üîå Kafka Consumer –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Kafka:', error);
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const admin = this.kafka.admin();
      await admin.connect();
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ app-events –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const topics = await admin.listTopics();
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ Kafka:', topics);
      
      if (!topics.includes('app-events')) {
        await admin.createTopics({
          topics: [{
            topic: 'app-events',
            numPartitions: 1,
            replicationFactor: 1
          }]
        });
        console.log('üìù –°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ app-events');
      }
      
      await admin.disconnect();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å–ø–µ—à–Ω–æ!');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka:', error);
      return false;
    }
  }
}

export default KafkaService;