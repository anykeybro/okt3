// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook'–æ–≤
import { Request, Response } from 'express';
import { TelegramBotService } from '../services/telegram-bot.service';
import { TelegramUpdate } from '../types';

export class TelegramController {
  private telegramBotService: TelegramBotService;

  constructor() {
    this.telegramBotService = new TelegramBotService();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
   */
  async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      const update: TelegramUpdate = req.body;
      
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(update, null, 2));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      this.telegramBotService.processUpdate(update).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      });

      // –û—Ç–≤–µ—á–∞–µ–º Telegram —Å—Ä–∞–∑—É
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Telegram webhook:', error);
      res.status(500).json({ 
        ok: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
   */
  async setWebhook(req: Request, res: Response): Promise<void> {
    try {
      const { webhookUrl } = req.body;

      if (!webhookUrl) {
        res.status(400).json({
          success: false,
          error: '–ù–µ —É–∫–∞–∑–∞–Ω URL webhook'
        });
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º TelegramService –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
      const telegramService = new (await import('../../notifications/services/telegram.service')).TelegramService();
      const success = await telegramService.setWebhook(webhookUrl);

      if (success) {
        res.json({
          success: true,
          message: 'Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        });
      } else {
        res.status(500).json({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook'
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook
   */
  async deleteWebhook(req: Request, res: Response): Promise<void> {
    try {
      const telegramService = new (await import('../../notifications/services/telegram.service')).TelegramService();
      const success = await telegramService.deleteWebhook();

      if (success) {
        res.json({
          success: true,
          message: 'Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });
      } else {
        res.status(500).json({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook'
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo(req: Request, res: Response): Promise<void> {
    try {
      const telegramService = new (await import('../../notifications/services/telegram.service')).TelegramService();
      const botInfo = await telegramService.getBotInfo();

      res.json({
        success: true,
        data: botInfo
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ'
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  async checkBotStatus(req: Request, res: Response): Promise<void> {
    try {
      const telegramService = new (await import('../../notifications/services/telegram.service')).TelegramService();
      const isOnline = await telegramService.checkBotStatus();

      res.json({
        success: true,
        data: {
          online: isOnline,
          status: isOnline ? '–ë–æ—Ç –æ–Ω–ª–∞–π–Ω' : '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞'
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendTestMessage(req: Request, res: Response): Promise<void> {
    try {
      const { chatId, message } = req.body;

      if (!chatId || !message) {
        res.status(400).json({
          success: false,
          error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã chatId –∏–ª–∏ message'
        });
        return;
      }

      const telegramService = new (await import('../../notifications/services/telegram.service')).TelegramService();
      const result = await telegramService.sendMessage(chatId, message);

      if (result.success) {
        res.json({
          success: true,
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          messageId: result.messageId
        });
      } else {
        res.status(500).json({
          success: false,
          error: result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async cleanupSessions(req: Request, res: Response): Promise<void> {
    try {
      this.telegramBotService.cleanupOldSessions();
      
      res.json({
        success: true,
        message: '–°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã'
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏'
      });
    }
  }
}