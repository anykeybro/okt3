// –°–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–±–æ–Ω–µ–Ω—Ç–∞–º–∏
import { PrismaClient } from '@prisma/client';
import { TelegramService } from '../../notifications/services/telegram.service';
import { 
  TelegramUpdate, 
  TelegramMessage, 
  TelegramCallbackQuery,
  BotUserState,
  BotUserSession,
  BotCommand,
  CallbackData,
  CallbackAction,
  TelegramKeyboard,
  TelegramReplyKeyboard
} from '../types';

export class TelegramBotService {
  private prisma: PrismaClient;
  private telegramService: TelegramService;
  private userSessions: Map<string, BotUserSession> = new Map();

  constructor() {
    this.prisma = new PrismaClient();
    this.telegramService = new TelegramService();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
   */
  async processUpdate(update: TelegramUpdate): Promise<void> {
    try {
      if (update.message) {
        await this.handleMessage(update.message);
      } else if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleMessage(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id.toString();
    const userId = message.from.id;
    const text = message.text?.trim();

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let session = this.getUserSession(chatId, userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text?.startsWith('/')) {
      await this.handleCommand(text as BotCommand, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    if (message.contact) {
      await this.handlePhoneContact(message.contact.phone_number, session);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    switch (session.state) {
      case BotUserState.INITIAL:
        await this.sendWelcomeMessage(chatId);
        break;
      case BotUserState.WAITING_PHONE:
        await this.sendPhoneRequest(chatId);
        break;
      default:
        await this.sendMainMenu(chatId);
    }

    this.updateUserSession(session);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
   */
  private async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const chatId = callbackQuery.message?.chat.id.toString();
    const userId = callbackQuery.from.id;
    
    if (!chatId) return;

    const session = this.getUserSession(chatId, userId);
    
    try {
      const callbackData: CallbackData = JSON.parse(callbackQuery.data || '{}');
      
      switch (callbackData.action) {
        case CallbackAction.SELECT_ACCOUNT:
          await this.handleSelectAccount(callbackData.data?.accountId, session);
          break;
        case CallbackAction.VIEW_BALANCE:
          await this.handleViewBalance(session);
          break;
        case CallbackAction.VIEW_PAYMENTS:
          await this.handleViewPayments(session);
          break;
        case CallbackAction.VIEW_TARIFF:
          await this.handleViewTariff(session);
          break;
        case CallbackAction.BACK_TO_MENU:
          await this.sendMainMenu(chatId);
          break;
        case CallbackAction.REFRESH_DATA:
          await this.handleRefreshData(session);
          break;
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await this.answerCallbackQuery(callbackQuery.id);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }

    this.updateUserSession(session);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  private async handleCommand(command: BotCommand, session: BotUserSession): Promise<void> {
    const chatId = session.chatId;

    switch (command) {
      case BotCommand.START:
        await this.sendWelcomeMessage(chatId);
        session.state = BotUserState.INITIAL;
        break;
      case BotCommand.HELP:
        await this.sendHelpMessage(chatId);
        break;
      case BotCommand.BALANCE:
        if (session.state === BotUserState.AUTHENTICATED) {
          await this.handleViewBalance(session);
        } else {
          await this.sendAuthRequiredMessage(chatId);
        }
        break;
      case BotCommand.PAYMENTS:
        if (session.state === BotUserState.AUTHENTICATED) {
          await this.handleViewPayments(session);
        } else {
          await this.sendAuthRequiredMessage(chatId);
        }
        break;
      case BotCommand.TARIFF:
        if (session.state === BotUserState.AUTHENTICATED) {
          await this.handleViewTariff(session);
        } else {
          await this.sendAuthRequiredMessage(chatId);
        }
        break;
      case BotCommand.ACCOUNTS:
        if (session.state === BotUserState.AUTHENTICATED) {
          await this.sendAccountSelection(session);
        } else {
          await this.sendAuthRequiredMessage(chatId);
        }
        break;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private async handlePhoneContact(phoneNumber: string, session: BotUserSession): Promise<void> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const normalizedPhone = this.normalizePhoneNumber(phoneNumber);
      
      // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const client = await this.prisma.client.findFirst({
        where: {
          phones: {
            has: normalizedPhone
          }
        },
        include: {
          accounts: {
            include: {
              tariff: true
            }
          }
        }
      });

      if (!client) {
        await this.telegramService.sendMessage(
          session.chatId,
          '‚ùå –ê–±–æ–Ω–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID –∫–ª–∏–µ–Ω—Ç–∞
      await this.prisma.client.update({
        where: { id: client.id },
        data: { telegramId: session.userId.toString() }
      });

      session.clientId = client.id;
      session.phone = normalizedPhone;
      session.state = BotUserState.AUTHENTICATED;

      await this.telegramService.sendMessage(
        session.chatId,
        `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${client.firstName} ${client.lastName}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`
      );

      // –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
      if (client.accounts.length > 1) {
        await this.sendAccountSelection(session);
      } else if (client.accounts.length === 1) {
        session.selectedAccountId = client.accounts[0].id;
        await this.sendMainMenu(session.chatId);
      } else {
        await this.telegramService.sendMessage(
          session.chatId,
          '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
      await this.telegramService.sendMessage(
        session.chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async sendWelcomeMessage(chatId: string): Promise<void> {
    const message = `
üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç OK-Telecom!</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    `.trim();

    const keyboard: TelegramReplyKeyboard = {
      keyboard: [[
        { text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }
      ]],
      resize_keyboard: true,
      one_time_keyboard: true
    };

    await this.telegramService.sendMessage(chatId, message);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await this.sendMessageWithReplyKeyboard(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞:', keyboard);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private async sendPhoneRequest(chatId: string): Promise<void> {
    const message = `
üì± <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
    `.trim();

    const keyboard: TelegramReplyKeyboard = {
      keyboard: [[
        { text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }
      ]],
      resize_keyboard: true,
      one_time_keyboard: true
    };

    await this.sendMessageWithReplyKeyboard(chatId, message, keyboard);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private async sendMainMenu(chatId: string): Promise<void> {
    const message = `
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `.trim();

    const keyboard: TelegramKeyboard = {
      inline_keyboard: [
        [
          { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: JSON.stringify({ action: CallbackAction.VIEW_BALANCE }) },
          { text: 'üìä –¢–∞—Ä–∏—Ñ', callback_data: JSON.stringify({ action: CallbackAction.VIEW_TARIFF }) }
        ],
        [
          { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: JSON.stringify({ action: CallbackAction.VIEW_PAYMENTS }) }
        ],
        [
          { text: 'üìã –õ–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞', callback_data: JSON.stringify({ action: CallbackAction.SELECT_ACCOUNT }) }
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: JSON.stringify({ action: CallbackAction.REFRESH_DATA }) }
        ]
      ]
    };

    await this.telegramService.sendMessageWithKeyboard(chatId, message, keyboard.inline_keyboard);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
   */
  private async sendAccountSelection(session: BotUserSession): Promise<void> {
    if (!session.clientId) return;

    try {
      const client = await this.prisma.client.findUnique({
        where: { id: session.clientId },
        include: {
          accounts: {
            include: {
              tariff: true
            }
          }
        }
      });

      if (!client || client.accounts.length === 0) {
        await this.telegramService.sendMessage(
          session.chatId,
          '‚ùå –õ–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
        );
        return;
      }

      const message = `
üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b>
      `.trim();

      const keyboard: TelegramKeyboard = {
        inline_keyboard: client.accounts.map(account => [
          {
            text: `${account.accountNumber} - ${account.tariff.name} (${account.balance.toFixed(2)} ‚ÇΩ)`,
            callback_data: JSON.stringify({
              action: CallbackAction.SELECT_ACCOUNT,
              data: { accountId: account.id }
            })
          }
        ])
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.inline_keyboard.push([
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: JSON.stringify({ action: CallbackAction.BACK_TO_MENU }) }
      ]);

      await this.telegramService.sendMessageWithKeyboard(session.chatId, message, keyboard.inline_keyboard);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤:', error);
      await this.telegramService.sendMessage(
        session.chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
   */
  private async handleSelectAccount(accountId: string, session: BotUserSession): Promise<void> {
    if (!accountId) return;

    session.selectedAccountId = accountId;
    session.state = BotUserState.AUTHENTICATED;

    await this.telegramService.sendMessage(
      session.chatId,
      '‚úÖ –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –≤—ã–±—Ä–∞–Ω!'
    );

    await this.sendMainMenu(session.chatId);
  }

  /**
   * –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
   */
  private async handleViewBalance(session: BotUserSession): Promise<void> {
    if (!session.selectedAccountId) {
      await this.sendAccountSelection(session);
      return;
    }

    try {
      const account = await this.prisma.account.findUnique({
        where: { id: session.selectedAccountId },
        include: {
          tariff: true,
          client: true
        }
      });

      if (!account) {
        await this.telegramService.sendMessage(
          session.chatId,
          '‚ùå –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π (–¥–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤)
      let daysLeft = 0;
      if (account.tariff.billingType === 'PREPAID_MONTHLY' && account.balance > 0) {
        daysLeft = Math.floor(account.balance / (account.tariff.price / 30));
      }

      const statusEmoji = account.status === 'ACTIVE' ? 'üü¢' : 
                         account.status === 'BLOCKED' ? 'üî¥' : 'üü°';

      const message = `
üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ</b>

üë§ <b>–ê–±–æ–Ω–µ–Ω—Ç:</b> ${account.client.firstName} ${account.client.lastName}
üè∑Ô∏è <b>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b> ${account.accountNumber}
üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> ${account.balance.toFixed(2)} ‚ÇΩ
${statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${this.getStatusText(account.status)}

üìä <b>–¢–∞—Ä–∏—Ñ:</b> ${account.tariff.name}
üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${account.tariff.price.toFixed(2)} ‚ÇΩ/${account.tariff.billingType === 'PREPAID_MONTHLY' ? '–º–µ—Å' : '—á–∞—Å'}
${account.tariff.billingType === 'PREPAID_MONTHLY' ? `‚è∞ <b>–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π:</b> ${daysLeft}` : ''}

üåê <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> ${account.tariff.speedDown}/${account.tariff.speedUp} –ú–±–∏—Ç/—Å
      `.trim();

      const keyboard: TelegramKeyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: JSON.stringify({ action: CallbackAction.VIEW_PAYMENTS }) },
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–µ', callback_data: JSON.stringify({ action: CallbackAction.VIEW_TARIFF }) }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: JSON.stringify({ action: CallbackAction.REFRESH_DATA }) },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ action: CallbackAction.BACK_TO_MENU }) }
          ]
        ]
      };

      await this.telegramService.sendMessageWithKeyboard(session.chatId, message, keyboard.inline_keyboard);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      await this.telegramService.sendMessage(
        session.chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
   */
  private async handleViewPayments(session: BotUserSession): Promise<void> {
    if (!session.selectedAccountId) {
      await this.sendAccountSelection(session);
      return;
    }

    try {
      const payments = await this.prisma.payment.findMany({
        where: { 
          accountId: session.selectedAccountId,
          status: 'COMPLETED'
        },
        orderBy: { createdAt: 'desc' },
        take: 10,
        include: {
          account: true
        }
      });

      if (payments.length === 0) {
        await this.telegramService.sendMessage(
          session.chatId,
          'üìù –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞.'
        );
        return;
      }

      let message = `üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n`;
      
      payments.forEach((payment, index) => {
        const date = payment.createdAt.toLocaleDateString('ru-RU');
        const time = payment.createdAt.toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        const sourceText = payment.source === 'ROBOKASSA' ? '–û–Ω–ª–∞–π–Ω' : '–ö–∞—Å—Å–∞';
        
        message += `${index + 1}. <b>${payment.amount.toFixed(2)} ‚ÇΩ</b>\n`;
        message += `   üìÖ ${date} ${time}\n`;
        message += `   üíº ${sourceText}\n`;
        if (payment.comment) {
          message += `   üí¨ ${payment.comment}\n`;
        }
        message += `\n`;
      });

      const keyboard: TelegramKeyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: JSON.stringify({ action: CallbackAction.VIEW_BALANCE }) },
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ action: CallbackAction.BACK_TO_MENU }) }
          ]
        ]
      };

      await this.telegramService.sendMessageWithKeyboard(session.chatId, message, keyboard.inline_keyboard);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
      await this.telegramService.sendMessage(
        session.chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ
   */
  private async handleViewTariff(session: BotUserSession): Promise<void> {
    if (!session.selectedAccountId) {
      await this.sendAccountSelection(session);
      return;
    }

    try {
      const account = await this.prisma.account.findUnique({
        where: { id: session.selectedAccountId },
        include: {
          tariff: true
        }
      });

      if (!account) {
        await this.telegramService.sendMessage(
          session.chatId,
          '‚ùå –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–∞—Ä–∏—Ñ–∞
      const services = await this.prisma.service.findMany({
        where: {
          id: { in: account.tariff.serviceIds }
        }
      });

      const billingTypeText = account.tariff.billingType === 'PREPAID_MONTHLY' ? 
        '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–º–µ—Å—è—á–Ω–∞—è)' : '–ü–æ—á–∞—Å–æ–≤–∞—è —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è';

      let message = `
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ</b>

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${account.tariff.name}
üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${account.tariff.price.toFixed(2)} ‚ÇΩ/${account.tariff.billingType === 'PREPAID_MONTHLY' ? '–º–µ—Å' : '—á–∞—Å'}
‚öôÔ∏è <b>–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> ${billingTypeText}

üåê <b>–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:</b>
   ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: ${account.tariff.speedDown} –ú–±–∏—Ç/—Å
   ‚¨ÜÔ∏è –û—Ç–¥–∞—á–∞: ${account.tariff.speedUp} –ú–±–∏—Ç/—Å

üìã <b>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>
      `.trim();

      if (services.length > 0) {
        services.forEach(service => {
          const serviceEmoji = service.type === 'INTERNET' ? 'üåê' :
                              service.type === 'IPTV' ? 'üì∫' : '‚òÅÔ∏è';
          message += `\n   ${serviceEmoji} ${service.name}`;
        });
      } else {
        message += '\n   –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥';
      }

      if (account.tariff.description) {
        message += `\n\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${account.tariff.description}`;
      }

      const keyboard: TelegramKeyboard = {
        inline_keyboard: [
          [
            { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: JSON.stringify({ action: CallbackAction.VIEW_BALANCE }) },
            { text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏', callback_data: JSON.stringify({ action: CallbackAction.VIEW_PAYMENTS }) }
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: JSON.stringify({ action: CallbackAction.BACK_TO_MENU }) }
          ]
        ]
      };

      await this.telegramService.sendMessageWithKeyboard(session.chatId, message, keyboard.inline_keyboard);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ:', error);
      await this.telegramService.sendMessage(
        session.chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async handleRefreshData(session: BotUserSession): Promise<void> {
    await this.telegramService.sendMessage(
      session.chatId,
      'üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'
    );
    
    await this.sendMainMenu(session.chatId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private async sendAuthRequiredMessage(chatId: string): Promise<void> {
    await this.telegramService.sendMessage(
      chatId,
      'üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
   */
  private async sendHelpMessage(chatId: string): Promise<void> {
    const message = `
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É OK-Telecom</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/payments - –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
/tariff - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ
/accounts - –í—ã–±—Ä–∞—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Ü–µ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
    `.trim();

    await this.telegramService.sendMessage(chatId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
   */
  private async sendMessageWithReplyKeyboard(
    chatId: string, 
    message: string, 
    keyboard: TelegramReplyKeyboard
  ): Promise<void> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ Telegram API –¥–ª—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    // —Ç–∞–∫ –∫–∞–∫ TelegramService –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.telegramService['botToken']}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
          reply_markup: keyboard,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:', error);
    }
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ callback query
   */
  private async answerCallbackQuery(callbackQueryId: string, text?: string): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.telegramService['botToken']}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text: text || '',
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getUserSession(chatId: string, userId: number): BotUserSession {
    const sessionKey = `${chatId}_${userId}`;
    
    if (!this.userSessions.has(sessionKey)) {
      const session: BotUserSession = {
        chatId,
        userId,
        state: BotUserState.INITIAL,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      this.userSessions.set(sessionKey, session);
    }

    return this.userSessions.get(sessionKey)!;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private updateUserSession(session: BotUserSession): void {
    session.updatedAt = new Date();
    const sessionKey = `${session.chatId}_${session.userId}`;
    this.userSessions.set(sessionKey, session);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private normalizePhoneNumber(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let normalized = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (normalized.startsWith('8')) {
      normalized = '7' + normalized.slice(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (normalized.startsWith('7')) {
      normalized = '+' + normalized;
    }
    
    return normalized;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  private getStatusText(status: string): string {
    switch (status) {
      case 'ACTIVE':
        return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'BLOCKED':
        return '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      case 'SUSPENDED':
        return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  public cleanupOldSessions(): void {
    const now = new Date();
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    for (const [key, session] of this.userSessions.entries()) {
      if (now.getTime() - session.updatedAt.getTime() > maxAge) {
        this.userSessions.delete(key);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
   */
  async sendNotification(clientId: string, message: string): Promise<boolean> {
    try {
      const client = await this.prisma.client.findUnique({
        where: { id: clientId }
      });

      if (!client?.telegramId) {
        return false;
      }

      const result = await this.telegramService.sendMessage(client.telegramId, message);
      return result.success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', error);
      return false;
    }
  }
}