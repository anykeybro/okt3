// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
import * as cron from 'node-cron';
import { PrismaClient } from '@prisma/client';
import { BillingEngine } from './billing-engine';
import { config } from '../../config/config';

export class BillingScheduler {
  private prisma: PrismaClient;
  private billingEngine: BillingEngine;
  private isRunning: boolean = false;
  private cronJob?: cron.ScheduledTask;

  constructor(prisma: PrismaClient) {
    this.prisma = prisma;
    this.billingEngine = new BillingEngine(prisma);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏–ª–ª–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–π —á–∞—Å
    this.cronJob = cron.schedule('0 * * * *', async () => {
      await this.runBillingCycle();
    }, {
      timezone: 'Europe/Moscow'
    });

    this.isRunning = true;

    console.log('üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏–ª–ª–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–π —á–∞—Å)');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => {
      this.runBillingCycle();
    }, 60000);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  stop(): void {
    if (this.cronJob) {
      this.cronJob.destroy();
    }
    this.isRunning = false;
    console.log('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–∏–ª–ª–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –±–∏–ª–ª–∏–Ω–≥–∞
   */
  async runBillingCycle(): Promise<void> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –±–∏–ª–ª–∏–Ω–≥–∞...');
      const startTime = Date.now();
      
      const stats = await this.billingEngine.processBilling();
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ –¶–∏–∫–ª –±–∏–ª–ª–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}–º—Å:`, stats);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveBillingStats(stats, duration);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–∏–ª–ª–∏–Ω–≥–∞:', error);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      await this.saveErrorLog(error);
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–∏–ª–ª–∏–Ω–≥–∞
   */
  async runManualBilling(): Promise<void> {
    console.log('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–∏–ª–ª–∏–Ω–≥–∞...');
    await this.runBillingCycle();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞
   */
  private async saveBillingStats(stats: any, duration: number): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      await this.prisma.$runCommandRaw({
        create: 'billing_stats',
        capped: true,
        size: 10485760, // 10MB
        max: 1000 // –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π
      }).catch(() => {
        // –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.prisma.$runCommandRaw({
        insert: 'billing_stats',
        documents: [{
          timestamp: new Date(),
          duration,
          stats,
          type: 'scheduled'
        }]
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –æ—à–∏–±–æ–∫
   */
  private async saveErrorLog(error: any): Promise<void> {
    try {
      await this.prisma.$runCommandRaw({
        insert: 'billing_errors',
        documents: [{
          timestamp: new Date(),
          error: {
            message: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined
          },
          type: 'billing_cycle_error'
        }]
      });

    } catch (logError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –æ—à–∏–±–æ–∫:', logError);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { isRunning: boolean; nextRun?: Date } {
    return {
      isRunning: this.isRunning,
      nextRun: this.cronJob ? new Date(Date.now() + 60 * 60 * 1000) : undefined // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —á–∞—Å
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async getLastStats(): Promise<any> {
    try {
      const result = await this.prisma.$runCommandRaw({
        find: 'billing_stats',
        sort: { timestamp: -1 },
        limit: 1
      }) as any;

      return result.cursor?.firstBatch?.[0] || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
   */
  async getErrorHistory(limit: number = 10): Promise<any[]> {
    try {
      const result = await this.prisma.$runCommandRaw({
        find: 'billing_errors',
        sort: { timestamp: -1 },
        limit
      }) as any;

      return result.cursor?.firstBatch || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫:', error);
      return [];
    }
  }
}