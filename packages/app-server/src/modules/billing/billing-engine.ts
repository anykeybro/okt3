// –û—Å–Ω–æ–≤–Ω–æ–π –±–∏–ª–ª–∏–Ω–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
import { PrismaClient, AccountStatus, BillingType } from '@prisma/client';
import { config } from '../../config/config';
import { 
  BillingResult, 
  BillingStats, 
  AccountBillingInfo, 
  BillingEngineConfig,
  ChargeCalculation 
} from './types';

export class BillingEngine {
  private prisma: PrismaClient;
  private config: BillingEngineConfig;

  constructor(prisma: PrismaClient, engineConfig?: Partial<BillingEngineConfig>) {
    this.prisma = prisma;
    this.config = {
      hourlyCheckInterval: config.billing.hourlyCheckInterval,
      notificationThresholds: config.billing.notificationThresholds,
      autoBlockEnabled: config.billing.autoBlockEnabled,
      defaultBlockThreshold: config.billing.defaultBlockThreshold,
      ...engineConfig
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  async processBilling(): Promise<BillingStats> {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...');
    
    const stats: BillingStats = {
      totalProcessed: 0,
      successfulCharges: 0,
      failedCharges: 0,
      blockedAccounts: 0,
      notificationsSent: 0,
      totalAmount: 0
    };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
      const accounts = await this.getActiveAccounts();
      stats.totalProcessed = accounts.length;

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${accounts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
      for (const account of accounts) {
        try {
          const result = await this.processAccount(account);
          this.updateStats(stats, result);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}:`, error);
          stats.failedCharges++;
        }
      }

      console.log('‚úÖ –ë–∏–ª–ª–∏–Ω–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω:', stats);
      return stats;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–º –¥–≤–∏–∂–∫–µ:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async processAccount(account: AccountBillingInfo): Promise<BillingResult[]> {
    const results: BillingResult[] = [];

    try {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å
      const calculation = await this.calculateCharge(account);
      
      if (calculation.shouldCharge && !this.config.dryRun) {
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        const chargeResult = await this.chargeAccount(account, calculation.amount, calculation.reason);
        results.push(chargeResult);

        if (chargeResult.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
          account.balance -= calculation.amount;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
      if (calculation.shouldNotify) {
        const notifyResult = await this.sendLowBalanceNotification(account);
        results.push(notifyResult);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
      if (calculation.shouldBlock && this.config.autoBlockEnabled && !this.config.dryRun) {
        const blockResult = await this.blockAccount(account);
        results.push(blockResult);
      }

      return results;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}:`, error);
      return [{
        accountId: account.id,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        action: 'charge'
      }];
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∫ —Å–ø–∏—Å–∞–Ω–∏—é
   */
  private async calculateCharge(account: AccountBillingInfo): Promise<ChargeCalculation> {
    const now = new Date();
    let shouldCharge = false;
    let amount = 0;
    let reason = '';

    if (account.billingType === 'PREPAID_MONTHLY') {
      // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–Ω–∞—è —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - —Å–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
      const lastCharge = account.lastChargeDate;
      
      if (!lastCharge) {
        // –ü–µ—Ä–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        shouldCharge = true;
        amount = account.tariffPrice;
        reason = '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü';
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –ª–∏ –º–µ—Å—è—Ü
        const nextChargeDate = new Date(lastCharge);
        nextChargeDate.setMonth(nextChargeDate.getMonth() + 1);
        
        if (now >= nextChargeDate) {
          shouldCharge = true;
          amount = account.tariffPrice;
          reason = '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ';
        }
      }
    } else if (account.billingType === 'HOURLY') {
      // –ü–æ—á–∞—Å–æ–≤–∞—è —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
      const hourlyRate = account.tariffPrice / (30 * 24); // –¶–µ–Ω–∞ –∑–∞ —á–∞—Å (–º–µ—Å—è—Ü = 30 –¥–Ω–µ–π)
      const lastCharge = account.lastChargeDate || new Date(now.getTime() - 60 * 60 * 1000); // –ß–∞—Å –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      
      const hoursToCharge = Math.floor((now.getTime() - lastCharge.getTime()) / (60 * 60 * 1000));
      
      if (hoursToCharge >= 1) {
        shouldCharge = true;
        amount = hourlyRate * hoursToCharge;
        reason = `–ü–æ—á–∞—Å–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ ${hoursToCharge} —á–∞—Å(–æ–≤)`;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (shouldCharge && account.balance < amount) {
      shouldCharge = false;
      reason = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
    const shouldNotify = this.config.notificationThresholds.some(threshold => 
      account.balance <= threshold && account.balance > threshold - amount
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    const shouldBlock = account.balance <= account.blockThreshold;

    return {
      accountId: account.id,
      amount,
      reason,
      shouldCharge,
      shouldNotify,
      shouldBlock
    };
  }

  /**
   * –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  private async chargeAccount(account: AccountBillingInfo, amount: number, reason: string): Promise<BillingResult> {
    try {
      await this.prisma.$transaction(async (tx) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await tx.account.update({
          where: { id: account.id },
          data: { 
            balance: { decrement: amount },
            updatedAt: new Date()
          }
        });

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ (—Å–ø–∏—Å–∞–Ω–∏–∏)
        await tx.payment.create({
          data: {
            accountId: account.id,
            amount: -amount, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            source: 'MANUAL', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ MANUAL
            comment: reason,
            status: 'COMPLETED',
            processedAt: new Date()
          }
        });
      });

      console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${amount} —Ä—É–±. —Å –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}: ${reason}`);

      return {
        accountId: account.id,
        success: true,
        amount,
        action: 'charge'
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}:`, error);
      return {
        accountId: account.id,
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è',
        action: 'charge'
      };
    }
  }

  /**
   * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  private async blockAccount(account: AccountBillingInfo): Promise<BillingResult> {
    try {
      await this.prisma.account.update({
        where: { id: account.id },
        data: { 
          status: AccountStatus.BLOCKED,
          updatedAt: new Date()
        }
      });

      console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç ${account.accountNumber} (–±–∞–ª–∞–Ω—Å: ${account.balance})`);

      // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ MikroTik —á–µ—Ä–µ–∑ Kafka –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

      return {
        accountId: account.id,
        success: true,
        action: 'block'
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}:`, error);
      return {
        accountId: account.id,
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
        action: 'block'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
   */
  private async sendLowBalanceNotification(account: AccountBillingInfo): Promise<BillingResult> {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.prisma.notification.create({
        data: {
          clientId: account.clientId,
          type: 'LOW_BALANCE',
          channel: account.telegramId ? 'TELEGRAM' : 'SMS',
          message: `–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞ –≤–∞—à–µ–º –ª–∏—Ü–µ–≤–æ–º —Å—á–µ—Ç–µ ${account.accountNumber} –æ—Å—Ç–∞–µ—Ç—Å—è ${account.balance} —Ä—É–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`,
          status: 'PENDING'
        }
      });

      console.log(`üì¢ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}`);

      return {
        accountId: account.id,
        success: true,
        action: 'notify'
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account.accountNumber}:`, error);
      return {
        accountId: account.id,
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        action: 'notify'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  private async getActiveAccounts(): Promise<AccountBillingInfo[]> {
    const accounts = await this.prisma.account.findMany({
      where: {
        status: AccountStatus.ACTIVE
      },
      include: {
        client: true,
        tariff: true,
        payments: {
          where: {
            amount: { lt: 0 } // –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–∞–Ω–∏—è
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 1
        }
      }
    });

    return accounts.map(account => ({
      id: account.id,
      accountNumber: account.accountNumber,
      balance: account.balance,
      tariffPrice: account.tariff.price,
      billingType: account.tariff.billingType as 'PREPAID_MONTHLY' | 'HOURLY',
      status: account.status as 'ACTIVE' | 'BLOCKED' | 'SUSPENDED',
      blockThreshold: account.blockThreshold,
      notificationDays: account.tariff.notificationDays,
      lastChargeDate: account.payments[0]?.createdAt,
      clientId: account.clientId,
      clientName: `${account.client.firstName} ${account.client.lastName}`,
      clientPhones: account.client.phones,
      telegramId: account.client.telegramId || undefined
    }));
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateStats(stats: BillingStats, results: BillingResult[]): void {
    for (const result of results) {
      if (result.success) {
        switch (result.action) {
          case 'charge':
            stats.successfulCharges++;
            stats.totalAmount += result.amount || 0;
            break;
          case 'block':
            stats.blockedAccounts++;
            break;
          case 'notify':
            stats.notificationsSent++;
            break;
        }
      } else {
        if (result.action === 'charge') {
          stats.failedCharges++;
        }
      }
    }
  }

  /**
   * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞)
   */
  async unblockAccount(accountId: string): Promise<BillingResult> {
    try {
      const account = await this.prisma.account.findUnique({
        where: { id: accountId },
        include: { client: true }
      });

      if (!account) {
        return {
          accountId,
          success: false,
          error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          action: 'unblock'
        };
      }

      if (account.status !== AccountStatus.BLOCKED) {
        return {
          accountId,
          success: false,
          error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          action: 'unblock'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      if (account.balance <= account.blockThreshold) {
        return {
          accountId,
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
          action: 'unblock'
        };
      }

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
      await this.prisma.account.update({
        where: { id: accountId },
        data: { 
          status: AccountStatus.ACTIVE,
          updatedAt: new Date()
        }
      });

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
      await this.prisma.notification.create({
        data: {
          clientId: account.clientId,
          type: 'UNBLOCKED',
          channel: account.client.telegramId ? 'TELEGRAM' : 'SMS',
          message: `–í–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ${account.accountNumber} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${account.balance} —Ä—É–±.`,
          status: 'PENDING'
        }
      });

      console.log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç ${account.accountNumber}`);

      // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ MikroTik —á–µ—Ä–µ–∑ Kafka –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

      return {
        accountId,
        success: true,
        action: 'unblock'
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountId}:`, error);
      return {
        accountId,
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
        action: 'unblock'
      };
    }
  }
}