// –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ MikroTik

import { PrismaClient } from '@prisma/client';
import { MikroTikCommandResult } from './device.types';
import { config } from '../../config/config';
import KafkaService from '../../kafka';

export interface CommandStatus {
  commandId: string;
  deviceId: string;
  accountId: string;
  type: string;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'timeout';
  result?: any;
  error?: string;
  createdAt: Date;
  completedAt?: Date;
  retryCount: number;
  maxRetries: number;
}

export class CommandMonitorService {
  private prisma: PrismaClient;
  private kafkaService: KafkaService;
  private commandStatuses = new Map<string, CommandStatus>();
  private timeoutHandlers = new Map<string, NodeJS.Timeout>();

  constructor(prisma: PrismaClient, kafkaService: KafkaService) {
    this.prisma = prisma;
    this.kafkaService = kafkaService;
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async start(): Promise<void> {
    try {
      await this.kafkaService.connectConsumer('command-monitor-group');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
      await this.kafkaService.subscribeToTopic(
        config.kafka.topics.deviceStatus,
        this.handleCommandResult.bind(this)
      );

      console.log('üìä Command Monitor Service –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Command Monitor Service:', error);
      throw error;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  registerCommand(
    commandId: string,
    deviceId: string,
    accountId: string,
    type: string,
    timeoutMs: number = 30000
  ): void {
    const commandStatus: CommandStatus = {
      commandId,
      deviceId,
      accountId,
      type,
      status: 'pending',
      createdAt: new Date(),
      retryCount: 0,
      maxRetries: config.mikrotik.maxRetries
    };

    this.commandStatuses.set(commandId, commandStatus);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const timeoutHandler = setTimeout(() => {
      this.handleCommandTimeout(commandId);
    }, timeoutMs);

    this.timeoutHandlers.set(commandId, timeoutHandler);

    console.log(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${commandId}`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  private async handleCommandResult(result: MikroTikCommandResult): Promise<void> {
    const commandStatus = this.commandStatuses.get(result.commandId);
    
    if (!commandStatus) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: ${result.commandId}`);
      return;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    const timeoutHandler = this.timeoutHandlers.get(result.commandId);
    if (timeoutHandler) {
      clearTimeout(timeoutHandler);
      this.timeoutHandlers.delete(result.commandId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
    commandStatus.status = result.success ? 'completed' : 'failed';
    commandStatus.result = result.result;
    commandStatus.error = result.error;
    commandStatus.completedAt = new Date();

    console.log(`üìä –ö–æ–º–∞–Ω–¥–∞ ${result.commandId} ${result.success ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' : '–∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π'}`);

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
    if (!result.success && commandStatus.retryCount < commandStatus.maxRetries) {
      await this.retryCommand(commandStatus);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.saveCommandResult(commandStatus);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.commandStatuses.delete(result.commandId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    await this.notifyCommandCompletion(commandStatus);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  private async handleCommandTimeout(commandId: string): Promise<void> {
    const commandStatus = this.commandStatuses.get(commandId);
    
    if (!commandStatus) {
      return;
    }

    console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã: ${commandId}`);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
    if (commandStatus.retryCount < commandStatus.maxRetries) {
      await this.retryCommand(commandStatus);
      return;
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–∞–π–º–∞—É—Ç
    commandStatus.status = 'timeout';
    commandStatus.error = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã';
    commandStatus.completedAt = new Date();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.saveCommandResult(commandStatus);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.commandStatuses.delete(commandId);
    this.timeoutHandlers.delete(commandId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.notifyCommandCompletion(commandStatus);
  }

  // –ü–æ–≤—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  private async retryCommand(commandStatus: CommandStatus): Promise<void> {
    commandStatus.retryCount++;
    commandStatus.status = 'pending';

    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã ${commandStatus.commandId} (–ø–æ–ø—ã—Ç–∫–∞ ${commandStatus.retryCount}/${commandStatus.maxRetries})`);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    await new Promise(resolve => setTimeout(resolve, config.mikrotik.retryDelay));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
    const retryCommandId = `${commandStatus.commandId}-retry-${commandStatus.retryCount}`;
    
    const command = {
      type: commandStatus.type,
      deviceId: commandStatus.deviceId,
      accountId: commandStatus.accountId,
      macAddress: '', // –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ
      timestamp: Date.now()
    };

    try {
      await this.kafkaService.sendMessage(config.kafka.topics.mikrotikCommands, command);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.registerCommand(
        retryCommandId,
        commandStatus.deviceId,
        commandStatus.accountId,
        commandStatus.type
      );
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã ${commandStatus.commandId}:`, error);
      
      commandStatus.status = 'failed';
      commandStatus.error = `–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: ${error}`;
      commandStatus.completedAt = new Date();
      
      await this.saveCommandResult(commandStatus);
      this.commandStatuses.delete(commandStatus.commandId);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  private async saveCommandResult(commandStatus: CommandStatus): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–≥–æ–≤ –∫–æ–º–∞–Ω–¥
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ Prisma —Å—Ö–µ–º–µ
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã ${commandStatus.commandId} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å CommandLog –≤ Prisma —Å—Ö–µ–º—É
      // await this.prisma.commandLog.create({
      //   data: {
      //     commandId: commandStatus.commandId,
      //     deviceId: commandStatus.deviceId,
      //     accountId: commandStatus.accountId,
      //     type: commandStatus.type,
      //     status: commandStatus.status,
      //     result: commandStatus.result ? JSON.stringify(commandStatus.result) : null,
      //     error: commandStatus.error,
      //     retryCount: commandStatus.retryCount,
      //     createdAt: commandStatus.createdAt,
      //     completedAt: commandStatus.completedAt
      //   }
      // });

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã ${commandStatus.commandId}:`, error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
  private async notifyCommandCompletion(commandStatus: CommandStatus): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const notification = {
        type: 'command_completed',
        deviceId: commandStatus.deviceId,
        accountId: commandStatus.accountId,
        commandId: commandStatus.commandId,
        success: commandStatus.status === 'completed',
        error: commandStatus.error,
        timestamp: Date.now()
      };

      await this.kafkaService.sendMessage(config.kafka.topics.notifications, notification);
      
      console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${commandStatus.commandId}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–∞–Ω–¥–µ ${commandStatus.commandId}:`, error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã
  getCommandStatus(commandId: string): CommandStatus | undefined {
    return this.commandStatuses.get(commandId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  getActiveCommands(): CommandStatus[] {
    return Array.from(this.commandStatuses.values());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  getCommandStats(): {
    total: number;
    pending: number;
    processing: number;
    completed: number;
    failed: number;
    timeout: number;
  } {
    const commands = Array.from(this.commandStatuses.values());
    
    return {
      total: commands.length,
      pending: commands.filter(c => c.status === 'pending').length,
      processing: commands.filter(c => c.status === 'processing').length,
      completed: commands.filter(c => c.status === 'completed').length,
      failed: commands.filter(c => c.status === 'failed').length,
      timeout: commands.filter(c => c.status === 'timeout').length
    };
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async stop(): Promise<void> {
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
      for (const timeoutHandler of this.timeoutHandlers.values()) {
        clearTimeout(timeoutHandler);
      }
      this.timeoutHandlers.clear();

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–∞–Ω–¥
      this.commandStatuses.clear();

      console.log('üõë Command Monitor Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Command Monitor Service:', error);
    }
  }
}