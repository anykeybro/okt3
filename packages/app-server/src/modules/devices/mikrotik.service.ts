// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MikroTik API

import { exec } from 'child_process';
import { promisify } from 'util';
import axios from 'axios';
import { 
  MikroTikConnectionConfig, 
  MikroTikApiResponse, 
  DHCPLease, 
  DeviceClientStats 
} from './device.types';
import { ExternalServiceError } from '../../common/errors';
import { config } from '../../config/config';

const execAsync = promisify(exec);

export class MikroTikService {
  private readonly defaultPort = 8728;
  private readonly defaultTimeout = 10000;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ ping
  async pingDevice(ipAddress: string): Promise<boolean> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ping –∫–æ–º–∞–Ω–¥—É –¥–ª—è Windows
      const { stdout } = await execAsync(`ping -n 1 -w 3000 ${ipAddress}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å ping –ø–æ –≤—ã–≤–æ–¥—É
      return stdout.includes('TTL=') || stdout.includes('–≤—Ä–µ–º—è<') || stdout.includes('time<');
    } catch (error) {
      console.log(`‚ùå Ping failed for ${ipAddress}:`, error);
      return false;
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MikroTik API
  async testConnection(connectionConfig: MikroTikConnectionConfig): Promise<boolean> {
    try {
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP API (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω RouterOS API)
      const response = await this.makeApiRequest(connectionConfig, '/system/identity/print');
      return response.success;
    } catch (error) {
      console.log(`‚ùå MikroTik API connection failed for ${connectionConfig.host}:`, error);
      return false;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ DHCP lease
  async addDHCPLease(connectionConfig: MikroTikConnectionConfig, lease: DHCPLease): Promise<MikroTikApiResponse> {
    try {
      const command = `/ip/dhcp-server/lease/add`;
      const params = {
        'mac-address': lease.macAddress,
        'address': lease.ipAddress,
        'server': lease.poolName,
        'comment': lease.comment || `–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–æ –±–∏–ª–ª–∏–Ω–≥–æ–º ${new Date().toISOString()}`
      };

      return await this.makeApiRequest(connectionConfig, command, params);
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è DHCP lease: ${error}`);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ DHCP lease
  async removeDHCPLease(connectionConfig: MikroTikConnectionConfig, macAddress: string): Promise<MikroTikApiResponse> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º lease –ø–æ MAC –∞–¥—Ä–µ—Å—É
      const findResponse = await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/print', {
        'where': `mac-address=${macAddress}`
      });

      if (!findResponse.success || !findResponse.data || findResponse.data.length === 0) {
        return { success: false, error: 'DHCP lease –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const leaseId = findResponse.data[0]['.id'];
      
      // –£–¥–∞–ª—è–µ–º lease
      return await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/remove', {
        'numbers': leaseId
      });
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DHCP lease: ${error}`);
    }
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤)
  async blockClient(connectionConfig: MikroTikConnectionConfig, macAddress: string): Promise<MikroTikApiResponse> {
    try {
      console.log(`üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${macAddress} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ${connectionConfig.host}`);
      
      // –ú–µ—Ç–æ–¥ 1: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Address List
      const addressListResult = await this.addToAddressList(connectionConfig, macAddress, 'blocked-clients');
      
      // –ú–µ—Ç–æ–¥ 2: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Firewall Filter (–µ—Å–ª–∏ Address List –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
      if (!addressListResult.success) {
        console.log('‚ö†Ô∏è Address List –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º Firewall Filter');
        return await this.addFirewallBlockRule(connectionConfig, macAddress);
      }

      return addressListResult;
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${error}`);
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
  async unblockClient(connectionConfig: MikroTikConnectionConfig, macAddress: string): Promise<MikroTikApiResponse> {
    try {
      console.log(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${macAddress} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ${connectionConfig.host}`);
      
      // –ú–µ—Ç–æ–¥ 1: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Address List
      const addressListResult = await this.removeFromAddressList(connectionConfig, macAddress, 'blocked-clients');
      
      // –ú–µ—Ç–æ–¥ 2: –£–¥–∞–ª–µ–Ω–∏–µ Firewall –ø—Ä–∞–≤–∏–ª–∞
      const firewallResult = await this.removeFirewallBlockRule(connectionConfig, macAddress);
      
      // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª
      return {
        success: addressListResult.success || firewallResult.success,
        data: {
          addressList: addressListResult,
          firewall: firewallResult
        }
      };
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${error}`);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MAC –∞–¥—Ä–µ—Å–∞ –≤ Address List
  private async addToAddressList(
    connectionConfig: MikroTikConnectionConfig, 
    macAddress: string, 
    listName: string
  ): Promise<MikroTikApiResponse> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –ø–æ MAC –∏–∑ DHCP lease
      const dhcpResponse = await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/print', {
        'where': `mac-address=${macAddress}`
      });

      if (!dhcpResponse.success || !dhcpResponse.data || dhcpResponse.data.length === 0) {
        return { success: false, error: 'IP –∞–¥—Ä–µ—Å –¥–ª—è MAC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DHCP lease' };
      }

      const ipAddress = dhcpResponse.data[0].address;
      
      // –î–æ–±–∞–≤–ª—è–µ–º IP –≤ Address List
      return await this.makeApiRequest(connectionConfig, '/ip/firewall/address-list/add', {
        'list': listName,
        'address': ipAddress,
        'comment': `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–∏–ª–ª–∏–Ω–≥–æ–º: MAC ${macAddress} - ${new Date().toISOString()}`
      });
    } catch (error) {
      return { success: false, error: `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Address List: ${error}` };
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ MAC –∞–¥—Ä–µ—Å–∞ –∏–∑ Address List
  private async removeFromAddressList(
    connectionConfig: MikroTikConnectionConfig, 
    macAddress: string, 
    listName: string
  ): Promise<MikroTikApiResponse> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –ø–æ MAC
      const dhcpResponse = await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/print', {
        'where': `mac-address=${macAddress}`
      });

      if (!dhcpResponse.success || !dhcpResponse.data || dhcpResponse.data.length === 0) {
        return { success: true }; // –ï—Å–ª–∏ –Ω–µ—Ç DHCP lease, —Ç–æ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç
      }

      const ipAddress = dhcpResponse.data[0].address;
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ Address List
      const findResponse = await this.makeApiRequest(connectionConfig, '/ip/firewall/address-list/print', {
        'where': `list=${listName} && address=${ipAddress}`
      });

      if (!findResponse.success || !findResponse.data || findResponse.data.length === 0) {
        return { success: true }; // –£–∂–µ —É–¥–∞–ª–µ–Ω
      }

      const entryId = findResponse.data[0]['.id'];
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
      return await this.makeApiRequest(connectionConfig, '/ip/firewall/address-list/remove', {
        'numbers': entryId
      });
    } catch (error) {
      return { success: false, error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Address List: ${error}` };
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Firewall Filter
  private async addFirewallBlockRule(
    connectionConfig: MikroTikConnectionConfig, 
    macAddress: string
  ): Promise<MikroTikApiResponse> {
    try {
      return await this.makeApiRequest(connectionConfig, '/ip/firewall/filter/add', {
        'chain': 'forward',
        'src-mac-address': macAddress,
        'action': 'drop',
        'comment': `–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞: ${macAddress} - ${new Date().toISOString()}`
      });
    } catch (error) {
      return { success: false, error: `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Firewall –ø—Ä–∞–≤–∏–ª–∞: ${error}` };
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Firewall Filter
  private async removeFirewallBlockRule(
    connectionConfig: MikroTikConnectionConfig, 
    macAddress: string
  ): Promise<MikroTikApiResponse> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª–æ –ø–æ MAC –∞–¥—Ä–µ—Å—É
      const findResponse = await this.makeApiRequest(connectionConfig, '/ip/firewall/filter/print', {
        'where': `src-mac-address=${macAddress} && action=drop`
      });

      if (!findResponse.success || !findResponse.data || findResponse.data.length === 0) {
        return { success: true }; // –ü—Ä–∞–≤–∏–ª–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
      }

      const ruleId = findResponse.data[0]['.id'];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
      return await this.makeApiRequest(connectionConfig, '/ip/firewall/filter/remove', {
        'numbers': ruleId
      });
    } catch (error) {
      return { success: false, error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Firewall –ø—Ä–∞–≤–∏–ª–∞: ${error}` };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  async getClientStats(connectionConfig: MikroTikConnectionConfig, macAddress: string): Promise<DeviceClientStats | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ DHCP lease
      const dhcpResponse = await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/print', {
        'where': `mac-address=${macAddress}`
      });

      if (!dhcpResponse.success || !dhcpResponse.data || dhcpResponse.data.length === 0) {
        return null;
      }

      const lease = dhcpResponse.data[0];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const statsResponse = await this.makeApiRequest(connectionConfig, '/interface/monitor-traffic', {
        'interface': 'ether1', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        'once': 'yes'
      });

      return {
        macAddress,
        ipAddress: lease.address,
        bytesIn: statsResponse.data?.['rx-bytes'] || 0,
        bytesOut: statsResponse.data?.['tx-bytes'] || 0,
        packetsIn: statsResponse.data?.['rx-packets'] || 0,
        packetsOut: statsResponse.data?.['tx-packets'] || 0,
        uptime: this.parseUptime(lease['last-seen']),
        lastSeen: new Date()
      };
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${error}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö DHCP lease
  async getAllDHCPLeases(connectionConfig: MikroTikConnectionConfig): Promise<DHCPLease[]> {
    try {
      const response = await this.makeApiRequest(connectionConfig, '/ip/dhcp-server/lease/print');
      
      if (!response.success || !response.data) {
        return [];
      }

      return response.data.map((lease: any) => ({
        macAddress: lease['mac-address'],
        ipAddress: lease.address,
        poolName: lease.server,
        comment: lease.comment
      }));
    } catch (error) {
      throw new ExternalServiceError('MikroTik', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ DHCP lease: ${error}`);
    }
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ MikroTik
  private async makeApiRequest(
    connectionConfig: MikroTikConnectionConfig, 
    command: string, 
    params?: Record<string, any>
  ): Promise<MikroTikApiResponse> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RouterOS API –∫–ª–∏–µ–Ω—Ç
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ REST API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      
      const timeout = connectionConfig.timeout || this.defaultTimeout;
      const port = connectionConfig.port || this.defaultPort;
      
      // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è RouterOS API
      console.log(`üîß MikroTik API –∑–∞–ø—Ä–æ—Å: ${command} –∫ ${connectionConfig.host}:${port}`);
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', params);
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π RouterOS API –∫–ª–∏–µ–Ω—Ç
      return {
        success: true,
        data: { message: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–¥–µ–º–æ —Ä–µ–∂–∏–º)' }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ MikroTik API –∑–∞–ø—Ä–æ—Å–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ MikroTik
  private parseUptime(uptimeString: string): number {
    if (!uptimeString) return 0;
    
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1d2h3m4s" –∏–ª–∏ "2h30m15s"
    const regex = /(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?/;
    const match = uptimeString.match(regex);
    
    if (!match) return 0;
    
    const days = parseInt(match[1] || '0', 10);
    const hours = parseInt(match[2] || '0', 10);
    const minutes = parseInt(match[3] || '0', 10);
    const seconds = parseInt(match[4] || '0', 10);
    
    return (days * 24 * 60 * 60) + (hours * 60 * 60) + (minutes * 60) + seconds;
  }
}