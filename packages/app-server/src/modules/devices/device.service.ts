// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ MikroTik

import { PrismaClient, Device, DeviceStatus } from '@prisma/client';
import bcrypt from 'bcrypt';
import { 
  CreateDeviceRequest, 
  UpdateDeviceRequest, 
  DeviceFilters, 
  DeviceResponse,
  DeviceHealthCheck,
  MikroTikCommand
} from './device.types';
import { MikroTikService } from './mikrotik.service';
import { ValidationError, NotFoundError, ConflictError } from '../../common/errors';
import { config } from '../../config/config';
import KafkaService from '../../kafka';

export class DeviceService {
  private prisma: PrismaClient;
  private mikrotikService: MikroTikService;
  private kafkaService: KafkaService;

  constructor(prisma: PrismaClient, kafkaService: KafkaService) {
    this.prisma = prisma;
    this.mikrotikService = new MikroTikService();
    this.kafkaService = kafkaService;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async createDevice(data: CreateDeviceRequest): Promise<DeviceResponse> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞
    if (!this.isValidIP(data.ipAddress)) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ IP
    const existingDevice = await this.prisma.device.findUnique({
      where: { ipAddress: data.ipAddress }
    });

    if (existingDevice) {
      throw new ConflictError(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å IP ${data.ipAddress} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const healthCheck = await this.checkDeviceHealth(data.ipAddress, data.username, data.password);
    
    if (!healthCheck.pingSuccess) {
      throw new ValidationError(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${data.ipAddress} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (ping failed)`);
    }

    if (!healthCheck.apiSuccess) {
      throw new ValidationError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API MikroTik –Ω–∞ ${data.ipAddress}`);
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const passwordHash = await bcrypt.hash(data.password, config.security.bcryptRounds);

    // –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const device = await this.prisma.device.create({
      data: {
        ipAddress: data.ipAddress,
        username: data.username,
        passwordHash,
        description: data.description,
        status: DeviceStatus.ONLINE,
        lastCheck: new Date()
      }
    });

    return this.mapDeviceToResponse(device);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  async getDevices(filters: DeviceFilters = {}): Promise<{
    devices: DeviceResponse[];
    total: number;
  }> {
    const { page = 1, limit = 20, status, search } = filters;
    const skip = (page - 1) * limit;

    const where: any = {};

    if (status) {
      where.status = status;
    }

    if (search) {
      where.OR = [
        { ipAddress: { contains: search, mode: 'insensitive' } },
        { description: { contains: search, mode: 'insensitive' } }
      ];
    }

    const [devices, total] = await Promise.all([
      this.prisma.device.findMany({
        where,
        skip,
        take: limit,
        orderBy: { createdAt: 'desc' },
        include: {
          _count: {
            select: { accounts: true }
          }
        }
      }),
      this.prisma.device.count({ where })
    ]);

    return {
      devices: devices.map(device => ({
        ...this.mapDeviceToResponse(device),
        accountsCount: device._count.accounts
      })),
      total
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ID
  async getDeviceById(id: string): Promise<DeviceResponse> {
    const device = await this.prisma.device.findUnique({
      where: { id },
      include: {
        _count: {
          select: { accounts: true }
        }
      }
    });

    if (!device) {
      throw new NotFoundError(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    return {
      ...this.mapDeviceToResponse(device),
      accountsCount: device._count.accounts
    };
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async updateDevice(id: string, data: UpdateDeviceRequest): Promise<DeviceResponse> {
    const device = await this.prisma.device.findUnique({
      where: { id }
    });

    if (!device) {
      throw new NotFoundError(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    const updateData: any = {
      ...data,
      updatedAt: new Date()
    };

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å, —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ
    if (data.password) {
      updateData.passwordHash = await bcrypt.hash(data.password, config.security.bcryptRounds);
      delete updateData.password;
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (data.username || data.password) {
      const username = data.username || device.username;
      const password = data.password || 'current_password'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
      
      if (data.password) {
        const healthCheck = await this.checkDeviceHealth(device.ipAddress, username, password);
        
        if (!healthCheck.apiSuccess) {
          throw new ValidationError('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        }
        
        updateData.status = DeviceStatus.ONLINE;
        updateData.lastCheck = new Date();
      }
    }

    const updatedDevice = await this.prisma.device.update({
      where: { id },
      data: updateData
    });

    return this.mapDeviceToResponse(updatedDevice);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async deleteDevice(id: string): Promise<void> {
    const device = await this.prisma.device.findUnique({
      where: { id },
      include: {
        _count: {
          select: { accounts: true }
        }
      }
    });

    if (!device) {
      throw new NotFoundError(`–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    if (device._count.accounts > 0) {
      throw new ConflictError('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ª–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞');
    }

    await this.prisma.device.delete({
      where: { id }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  async checkDeviceHealth(ipAddress: string, username?: string, password?: string): Promise<DeviceHealthCheck> {
    const startTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
    const pingSuccess = await this.mikrotikService.pingDevice(ipAddress);
    
    let apiSuccess = false;
    let error: string | undefined;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –µ—Å–ª–∏ –µ—Å—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (username && password && pingSuccess) {
      try {
        apiSuccess = await this.mikrotikService.testConnection({
          host: ipAddress,
          username,
          password
        });
      } catch (err) {
        error = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API';
      }
    }

    const responseTime = Date.now() - startTime;

    return {
      deviceId: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
      pingSuccess,
      apiSuccess,
      responseTime,
      error,
      timestamp: new Date()
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  async checkAllDevices(): Promise<DeviceHealthCheck[]> {
    const devices = await this.prisma.device.findMany();
    const results: DeviceHealthCheck[] = [];

    for (const device of devices) {
      try {
        const password = await this.getDevicePassword(device.id);
        const healthCheck = await this.checkDeviceHealth(
          device.ipAddress, 
          device.username, 
          password
        );
        
        healthCheck.deviceId = device.id;
        results.push(healthCheck);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const newStatus = healthCheck.apiSuccess ? DeviceStatus.ONLINE : 
                         healthCheck.pingSuccess ? DeviceStatus.ERROR : DeviceStatus.OFFLINE;

        await this.prisma.device.update({
          where: { id: device.id },
          data: {
            status: newStatus,
            lastCheck: new Date()
          }
        });

      } catch (error) {
        const healthCheck: DeviceHealthCheck = {
          deviceId: device.id,
          pingSuccess: false,
          apiSuccess: false,
          responseTime: 0,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          timestamp: new Date()
        };
        
        results.push(healthCheck);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å ERROR
        await this.prisma.device.update({
          where: { id: device.id },
          data: {
            status: DeviceStatus.ERROR,
            lastCheck: new Date()
          }
        });
      }
    }

    return results;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Kafka
  async sendMikroTikCommand(command: MikroTikCommand): Promise<string> {
    try {
      const commandId = `${command.deviceId}-${command.timestamp}`;
      
      await this.kafkaService.sendMessage(config.kafka.topics.mikrotikCommands, {
        ...command,
        timestamp: Date.now()
      });
      
      console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ MikroTik –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${command.type} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${command.deviceId}`);
      return commandId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã MikroTik:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å consumer)
  getCommandStatus(commandId: string): any {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CommandMonitorService
    console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã: ${commandId}`);
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å consumer)
  getActiveCommands(): any[] {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CommandMonitorService
    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
    return [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å consumer)
  getCommandStats(): any {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CommandMonitorService
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥');
    return {
      total: 0,
      pending: 0,
      processing: 0,
      completed: 0,
      failed: 0,
      timeout: 0
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  private async getDevicePassword(deviceId: string): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã, –∞ –Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤–º–µ—Å—Ç–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    throw new Error('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞
  private isValidIP(ip: string): boolean {
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return ipRegex.test(ip);
  }

  // –ú–∞–ø–ø–∏–Ω–≥ Device –≤ DeviceResponse
  private mapDeviceToResponse(device: Device): DeviceResponse {
    return {
      id: device.id,
      ipAddress: device.ipAddress,
      username: device.username,
      description: device.description || undefined,
      status: device.status,
      lastCheck: device.lastCheck || undefined,
      createdAt: device.createdAt,
      updatedAt: device.updatedAt
    };
  }
}