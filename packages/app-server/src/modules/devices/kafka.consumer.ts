// Kafka consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ MikroTik

import { PrismaClient } from '@prisma/client';
import { MikroTikService } from './mikrotik.service';
import { MikroTikCommand, MikroTikCommandResult } from './device.types';
import { config } from '../../config/config';
import KafkaService from '../../kafka';

export class MikroTikKafkaConsumer {
  private prisma: PrismaClient;
  private mikrotikService: MikroTikService;
  private kafkaService: KafkaService;

  constructor(prisma: PrismaClient, kafkaService: KafkaService) {
    this.prisma = prisma;
    this.mikrotikService = new MikroTikService();
    this.kafkaService = kafkaService;
  }

  // –ó–∞–ø—É—Å–∫ consumer'–∞
  async start(): Promise<void> {
    try {
      await this.kafkaService.connectConsumer('mikrotik-consumer-group');
      
      await this.kafkaService.subscribeToTopic(
        config.kafka.topics.mikrotikCommands,
        this.handleMikroTikCommand.bind(this)
      );

      console.log('üéØ MikroTik Kafka Consumer –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MikroTik Kafka Consumer:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ MikroTik
  private async handleMikroTikCommand(message: MikroTikCommand): Promise<void> {
    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã MikroTik: ${message.type} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${message.deviceId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      const device = await this.prisma.device.findUnique({
        where: { id: message.deviceId }
      });

      if (!device) {
        console.error(`‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${message.deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        await this.sendCommandResult({
          commandId: `${message.deviceId}-${message.timestamp}`,
          deviceId: message.deviceId,
          success: false,
          error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          timestamp: Date.now()
        });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–≤–æ–º —Å—á–µ—Ç–µ
      const account = await this.prisma.account.findUnique({
        where: { id: message.accountId },
        include: { client: true }
      });

      if (!account) {
        console.error(`‚ùå –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ${message.accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        await this.sendCommandResult({
          commandId: `${message.deviceId}-${message.timestamp}`,
          deviceId: message.deviceId,
          success: false,
          error: '–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          timestamp: Date.now()
        });
        return;
      }

      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MikroTik
      const connectionConfig = {
        host: device.ipAddress,
        username: device.username,
        password: 'encrypted_password' // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø–∞—Ä–æ–ª—è
      };

      let result: any;
      let success = false;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (message.type) {
        case 'ADD_DHCP':
          if (!message.ipAddress || !message.poolName) {
            throw new Error('–î–ª—è –∫–æ–º–∞–Ω–¥—ã ADD_DHCP —Ç—Ä–µ–±—É—é—Ç—Å—è ipAddress –∏ poolName');
          }
          
          result = await this.mikrotikService.addDHCPLease(connectionConfig, {
            macAddress: message.macAddress,
            ipAddress: message.ipAddress,
            poolName: message.poolName,
            comment: `–õ/–°: ${account.accountNumber}, –ö–ª–∏–µ–Ω—Ç: ${account.client.firstName} ${account.client.lastName}`
          });
          success = result.success;
          break;

        case 'REMOVE_DHCP':
          result = await this.mikrotikService.removeDHCPLease(connectionConfig, message.macAddress);
          success = result.success;
          break;

        case 'BLOCK_CLIENT':
          result = await this.mikrotikService.blockClient(connectionConfig, message.macAddress);
          success = result.success;
          break;

        case 'UNBLOCK_CLIENT':
          result = await this.mikrotikService.unblockClient(connectionConfig, message.macAddress);
          success = result.success;
          break;

        case 'GET_STATS':
          result = await this.mikrotikService.getClientStats(connectionConfig, message.macAddress);
          success = result !== null;
          break;

        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: ${message.type}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await this.sendCommandResult({
        commandId: `${message.deviceId}-${message.timestamp}`,
        deviceId: message.deviceId,
        success,
        result,
        timestamp: Date.now()
      });

      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${message.type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${message.deviceId}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${message.type}:`, error);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      await this.sendCommandResult({
        commandId: `${message.deviceId}-${message.timestamp}`,
        deviceId: message.deviceId,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: Date.now()
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  private async sendCommandResult(result: MikroTikCommandResult): Promise<void> {
    try {
      await this.kafkaService.sendMessage(config.kafka.topics.deviceStatus, result);
      console.log(`üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${result.commandId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ consumer'–∞
  async stop(): Promise<void> {
    try {
      await this.kafkaService.disconnect();
      console.log('üõë MikroTik Kafka Consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MikroTik Kafka Consumer:', error);
    }
  }
}