// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { PrismaClient } from '@prisma/client';
import { SMSService } from './sms.service';
import { TelegramService } from './telegram.service';
import { TemplateService } from './template.service';
import { TelegramBotService } from '../../telegram/services/telegram-bot.service';
import { 
  NotificationData, 
  NotificationResult, 
  NotificationType, 
  NotificationChannel, 
  NotificationStatus 
} from '../types';
import { config } from '../../../config/config';

export class NotificationService {
  private smsService: SMSService;
  private telegramService: TelegramService;
  private telegramBotService: TelegramBotService;
  private templateService: TemplateService;

  constructor(private prisma: PrismaClient) {
    this.smsService = new SMSService();
    this.telegramService = new TelegramService();
    this.telegramBotService = new TelegramBotService();
    this.templateService = new TemplateService(prisma);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (Telegram -> SMS)
   */
  async sendNotification(data: NotificationData): Promise<NotificationResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      const client = await this.prisma.client.findUnique({
        where: { id: data.clientId },
        include: {
          accounts: {
            include: {
              tariff: true,
            },
          },
        },
      });

      if (!client) {
        throw new Error(`–ö–ª–∏–µ–Ω—Ç —Å ID ${data.clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
      const templateVariables = this.prepareTemplateVariables(client, data.variables);

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
      if (client.telegramId) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
        const botResult = await this.sendTelegramBotNotification(
          data.clientId,
          templateVariables
        );

        if (botResult) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∂—É—Ä–Ω–∞–ª
          await this.saveNotificationLog(
            data.clientId,
            data.type,
            NotificationChannel.TELEGRAM,
            'bot_notification',
            NotificationStatus.SENT
          );

          return {
            success: true,
            channel: NotificationChannel.TELEGRAM,
            messageId: 'bot_notification'
          };
        }

        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Telegram API
        const telegramResult = await this.sendTelegramNotification(
          client.telegramId,
          data.type,
          templateVariables
        );

        if (telegramResult.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∂—É—Ä–Ω–∞–ª
          await this.saveNotificationLog(
            data.clientId,
            data.type,
            NotificationChannel.TELEGRAM,
            telegramResult.messageId || '',
            NotificationStatus.SENT
          );

          return telegramResult;
        }
      }

      // –ï—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
      if (client.phones && client.phones.length > 0) {
        const smsResult = await this.sendSMSNotification(
          client.phones[0], // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          data.type,
          templateVariables
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∂—É—Ä–Ω–∞–ª
        await this.saveNotificationLog(
          data.clientId,
          data.type,
          NotificationChannel.SMS,
          smsResult.messageId || '',
          smsResult.success ? NotificationStatus.SENT : NotificationStatus.FAILED
        );

        return smsResult;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ Telegram, –Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      throw new Error('–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∂—É—Ä–Ω–∞–ª
      await this.saveNotificationLog(
        data.clientId,
        data.type,
        NotificationChannel.TELEGRAM, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        '',
        NotificationStatus.FAILED,
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );

      return {
        success: false,
        channel: NotificationChannel.TELEGRAM,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
   */
  private async sendTelegramBotNotification(
    clientId: string,
    variables: Record<string, any>
  ): Promise<boolean> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
      const message = this.formatBotNotificationMessage(variables);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      return await this.telegramBotService.sendNotification(clientId, message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
   */
  private formatBotNotificationMessage(variables: Record<string, any>): string {
    const { firstName, lastName, balance, tariffName, accountNumber } = variables;
    
    return `
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OK-Telecom</b>

üë§ <b>–ê–±–æ–Ω–µ–Ω—Ç:</b> ${firstName} ${lastName}
üè∑Ô∏è <b>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b> ${accountNumber}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${balance} ‚ÇΩ
üìä <b>–¢–∞—Ä–∏—Ñ:</b> ${tariffName}

${variables.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.'}
    `.trim();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendTelegramNotification(
    telegramId: string,
    type: NotificationType,
    variables: Record<string, any>
  ): Promise<NotificationResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
      const template = await this.templateService.getTemplate(type, NotificationChannel.TELEGRAM);
      if (!template) {
        throw new Error(`–®–∞–±–ª–æ–Ω Telegram –¥–ª—è —Ç–∏–ø–∞ ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
      const processed = this.templateService.processTemplate(template, variables);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const result = await this.telegramService.sendMessage(telegramId, processed.message);

      return {
        success: result.success,
        channel: NotificationChannel.TELEGRAM,
        messageId: result.messageId?.toString(),
        error: result.error,
      };
    } catch (error) {
      return {
        success: false,
        channel: NotificationChannel.TELEGRAM,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ Telegram',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendSMSNotification(
    phone: string,
    type: NotificationType,
    variables: Record<string, any>
  ): Promise<NotificationResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
      const template = await this.templateService.getTemplate(type, NotificationChannel.SMS);
      if (!template) {
        throw new Error(`–®–∞–±–ª–æ–Ω SMS –¥–ª—è —Ç–∏–ø–∞ ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
      const processed = this.templateService.processTemplate(template, variables);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      const result = await this.smsService.sendSMS(phone, processed.message);

      return {
        success: result.success,
        channel: NotificationChannel.SMS,
        messageId: result.messageId,
        error: result.error,
      };
    } catch (error) {
      return {
        success: false,
        channel: NotificationChannel.SMS,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ SMS',
      };
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
   */
  private prepareTemplateVariables(client: any, additionalVariables?: Record<string, any>): Record<string, any> {
    const account = client.accounts?.[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç
    
    const baseVariables = {
      firstName: client.firstName,
      lastName: client.lastName,
      middleName: client.middleName || '',
      fullName: `${client.firstName} ${client.lastName}`,
      phone: client.phones?.[0] || '',
      email: client.email || '',
      accountNumber: account?.accountNumber || '',
      balance: account?.balance || 0,
      tariffName: account?.tariff?.name || '',
      tariffPrice: account?.tariff?.price || 0,
      currentDate: new Date().toLocaleDateString('ru-RU'),
      currentTime: new Date().toLocaleTimeString('ru-RU'),
    };

    return { ...baseVariables, ...additionalVariables };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async saveNotificationLog(
    clientId: string,
    type: NotificationType,
    channel: NotificationChannel,
    externalId: string,
    status: NotificationStatus,
    errorMessage?: string
  ): Promise<void> {
    try {
      await this.prisma.notification.create({
        data: {
          clientId,
          type,
          channel,
          message: errorMessage || `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${channel}`,
          status,
          externalId: externalId || undefined,
          sentAt: status === NotificationStatus.SENT ? new Date() : undefined,
        },
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∂—É—Ä–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendBulkNotifications(notifications: NotificationData[]): Promise<NotificationResult[]> {
    const results: NotificationResult[] = [];
    
    for (const notification of notifications) {
      try {
        const result = await this.sendNotification(notification);
        results.push(result);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        await new Promise(resolve => setTimeout(resolve, config.notifications.retryDelay / 10));
      } catch (error) {
        results.push({
          success: false,
          channel: NotificationChannel.TELEGRAM,
          error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏',
        });
      }
    }

    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationHistory(
    clientId?: string,
    type?: NotificationType,
    channel?: NotificationChannel,
    limit: number = 100,
    offset: number = 0
  ): Promise<any[]> {
    try {
      const where: any = {};
      
      if (clientId) where.clientId = clientId;
      if (type) where.type = type;
      if (channel) where.channel = channel;

      return await this.prisma.notification.findMany({
        where,
        include: {
          client: {
            select: {
              firstName: true,
              lastName: true,
              phones: true,
            },
          },
        },
        orderBy: { createdAt: 'desc' },
        take: limit,
        skip: offset,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getNotificationStats(dateFrom?: Date, dateTo?: Date): Promise<any> {
    try {
      const where: any = {};
      
      if (dateFrom || dateTo) {
        where.createdAt = {};
        if (dateFrom) where.createdAt.gte = dateFrom;
        if (dateTo) where.createdAt.lte = dateTo;
      }

      const [total, byStatus, byChannel, byType] = await Promise.all([
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        this.prisma.notification.count({ where }),
        
        // –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        this.prisma.notification.groupBy({
          by: ['status'],
          where,
          _count: { status: true },
        }),
        
        // –ü–æ –∫–∞–Ω–∞–ª–∞–º
        this.prisma.notification.groupBy({
          by: ['channel'],
          where,
          _count: { channel: true },
        }),
        
        // –ü–æ —Ç–∏–ø–∞–º
        this.prisma.notification.groupBy({
          by: ['type'],
          where,
          _count: { type: true },
        }),
      ]);

      return {
        total,
        byStatus: byStatus.reduce((acc, item) => {
          acc[item.status] = item._count.status;
          return acc;
        }, {} as Record<string, number>),
        byChannel: byChannel.reduce((acc, item) => {
          acc[item.channel] = item._count.channel;
          return acc;
        }, {} as Record<string, number>),
        byType: byType.reduce((acc, item) => {
          acc[item.type] = item._count.type;
          return acc;
        }, {} as Record<string, number>),
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async checkServicesStatus(): Promise<{ telegram: boolean; sms: boolean }> {
    const [telegramStatus, smsStatus] = await Promise.all([
      this.telegramService.checkBotStatus(),
      this.smsService.checkStatus(),
    ]);

    return {
      telegram: telegramStatus,
      sms: smsStatus,
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
      await this.templateService.initializeDefaultTemplates();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
      const status = await this.checkServicesStatus();
      console.log('üì± –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', status);
      
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
}