// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { PrismaClient } from '@prisma/client';
import { NotificationType, NotificationChannel, ProcessedTemplate } from '../types';

export class TemplateService {
  constructor(private prisma: PrismaClient) {}

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async getTemplate(type: NotificationType, channel: NotificationChannel): Promise<string | null> {
    try {
      const template = await this.prisma.notificationTemplate.findUnique({
        where: {
          type_channel: {
            type,
            channel,
          },
        },
      });

      return template?.isActive ? template.template : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   */
  processTemplate(template: string, variables: Record<string, any>): ProcessedTemplate {
    let processedMessage = template;
    const usedVariables: Record<string, any> = {};

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {{variable}} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
    processedMessage = processedMessage.replace(/\{\{(\w+)\}\}/g, (match, variableName) => {
      if (variables.hasOwnProperty(variableName)) {
        usedVariables[variableName] = variables[variableName];
        return String(variables[variableName]);
      }
      return match; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    });

    return {
      message: processedMessage,
      variables: usedVariables,
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
   */
  async upsertTemplate(
    type: NotificationType,
    channel: NotificationChannel,
    template: string,
    isActive: boolean = true
  ): Promise<void> {
    try {
      await this.prisma.notificationTemplate.upsert({
        where: {
          type_channel: {
            type,
            channel,
          },
        },
        update: {
          template,
          isActive,
        },
        create: {
          type,
          channel,
          template,
          isActive,
        },
      });

      console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${type}/${channel} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
   */
  async getAllTemplates(): Promise<any[]> {
    try {
      return await this.prisma.notificationTemplate.findMany({
        orderBy: [
          { type: 'asc' },
          { channel: 'asc' },
        ],
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
   */
  async deleteTemplate(type: NotificationType, channel: NotificationChannel): Promise<void> {
    try {
      await this.prisma.notificationTemplate.delete({
        where: {
          type_channel: {
            type,
            channel,
          },
        },
      });

      console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${type}/${channel} —É–¥–∞–ª–µ–Ω`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
   */
  async initializeDefaultTemplates(): Promise<void> {
    const defaultTemplates = [
      // Telegram —à–∞–±–ª–æ–Ω—ã
      {
        type: NotificationType.WELCOME,
        channel: NotificationChannel.TELEGRAM,
        template: `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OK-Telecom!</b>

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{firstName}} {{lastName}}!

–í–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: <code>{{accountNumber}}</code>
–¢–∞—Ä–∏—Ñ: <b>{{tariffName}}</b>
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{{balance}} ‚ÇΩ</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö —É—Å–ª—É–≥! üöÄ`,
      },
      {
        type: NotificationType.PAYMENT,
        channel: NotificationChannel.TELEGRAM,
        template: `üí∞ <b>–ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω</b>

–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: <code>{{accountNumber}}</code>
–°—É–º–º–∞: <b>+{{amount}} ‚ÇΩ</b>
–ë–∞–ª–∞–Ω—Å: <b>{{balance}} ‚ÇΩ</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! ‚úÖ`,
      },
      {
        type: NotificationType.LOW_BALANCE,
        channel: NotificationChannel.TELEGRAM,
        template: `‚ö†Ô∏è <b>–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å</b>

–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: <code>{{accountNumber}}</code>
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{{balance}} ‚ÇΩ</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏.`,
      },
      {
        type: NotificationType.BLOCKED,
        channel: NotificationChannel.TELEGRAM,
        template: `üö´ <b>–£—Å–ª—É–≥–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>

–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: <code>{{accountNumber}}</code>
–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ

–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`,
      },
      {
        type: NotificationType.UNBLOCKED,
        channel: NotificationChannel.TELEGRAM,
        template: `‚úÖ <b>–£—Å–ª—É–≥–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>

–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: <code>{{accountNumber}}</code>
–ë–∞–ª–∞–Ω—Å: <b>{{balance}} ‚ÇΩ</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üéâ`,
      },

      // SMS —à–∞–±–ª–æ–Ω—ã
      {
        type: NotificationType.WELCOME,
        channel: NotificationChannel.SMS,
        template: `OK-Telecom: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –õ/–°: {{accountNumber}}, –¢–∞—Ä–∏—Ñ: {{tariffName}}, –ë–∞–ª–∞–Ω—Å: {{balance}} —Ä—É–±.`,
      },
      {
        type: NotificationType.PAYMENT,
        channel: NotificationChannel.SMS,
        template: `OK-Telecom: –ü–ª–∞—Ç–µ–∂ +{{amount}} —Ä—É–±. –∑–∞—á–∏—Å–ª–µ–Ω. –õ/–°: {{accountNumber}}, –ë–∞–ª–∞–Ω—Å: {{balance}} —Ä—É–±.`,
      },
      {
        type: NotificationType.LOW_BALANCE,
        channel: NotificationChannel.SMS,
        template: `OK-Telecom: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å {{balance}} —Ä—É–±. –õ/–°: {{accountNumber}}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.`,
      },
      {
        type: NotificationType.BLOCKED,
        channel: NotificationChannel.SMS,
        template: `OK-Telecom: –£—Å–ª—É–≥–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –õ/–°: {{accountNumber}}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.`,
      },
      {
        type: NotificationType.UNBLOCKED,
        channel: NotificationChannel.SMS,
        template: `OK-Telecom: –£—Å–ª—É–≥–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –õ/–°: {{accountNumber}}, –ë–∞–ª–∞–Ω—Å: {{balance}} —Ä—É–±.`,
      },
    ];

    try {
      for (const template of defaultTemplates) {
        await this.upsertTemplate(
          template.type,
          template.channel,
          template.template
        );
      }

      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
   */
  validateTemplate(template: string): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    const openBraces = (template.match(/\{\{/g) || []).length;
    const closeBraces = (template.match(/\}\}/g) || []).length;
    
    if (openBraces !== closeBraces) {
      errors.push('–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    if (template.includes('{{}}')) {
      errors.push('–ù–∞–π–¥–µ–Ω—ã –ø—É—Å—Ç—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è SMS (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 160 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤)
    const messageWithoutPlaceholders = template.replace(/\{\{\w+\}\}/g, '');
    if (messageWithoutPlaceholders.length > 160) {
      errors.push('–®–∞–±–ª–æ–Ω SMS —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª–µ–µ 160 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}