// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MikroTik

import { PrismaClient } from '@prisma/client';
import KafkaService from '../kafka';
import { MikroTikKafkaConsumer } from '../modules/devices/kafka.consumer';
import { MikroTikCommand } from '../modules/devices/device.types';
import { config } from '../config/config';

async function testKafkaIntegration() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MikroTik...');

  const prisma = new PrismaClient();
  const kafkaService = new KafkaService();
  const consumer = new MikroTikKafkaConsumer(prisma, kafkaService);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka...');
    const isKafkaAvailable = await kafkaService.testConnection();
    
    if (!isKafkaAvailable) {
      console.log('‚ùå Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Kafka –∑–∞–ø—É—â–µ–Ω.');
      return;
    }

    console.log('‚úÖ Kafka –¥–æ—Å—Ç—É–ø–µ–Ω');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º producer –∏ consumer
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka...');
    await kafkaService.connectProducer();
    await consumer.start();

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å–ø–µ—à–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const testDevice = await prisma.device.upsert({
      where: { ipAddress: '192.168.1.100' },
      update: {},
      create: {
        ipAddress: '192.168.1.100',
        username: 'admin',
        passwordHash: 'test_hash',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        status: 'ONLINE'
      }
    });

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    let testClient = await prisma.client.findFirst({
      where: { phones: { has: '+79991234567' } },
    });

    if (!testClient) {
      testClient = await prisma.client.create({
        data: {
          firstName: '–¢–µ—Å—Ç',
          lastName: '–¢–µ—Å—Ç–æ–≤',
          phones: ['+79991234567'],
          email: 'test@example.com'
        }
      });
    }

    const testAccount = await prisma.account.upsert({
      where: { accountNumber: 'TEST001' },
      update: {},
      create: {
        accountNumber: 'TEST001',
        clientId: testClient.id,
        tariffId: 'default-tariff', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        balance: 100,
        status: 'ACTIVE',
        poolName: 'test-pool',
        blockThreshold: 0,
        deviceId: testDevice.id
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥...');

    const commands: MikroTikCommand[] = [
      {
        type: 'ADD_DHCP',
        deviceId: testDevice.id,
        accountId: testAccount.id,
        macAddress: '00:11:22:33:44:55',
        ipAddress: '192.168.1.200',
        poolName: 'test-pool',
        timestamp: Date.now()
      },
      {
        type: 'BLOCK_CLIENT',
        deviceId: testDevice.id,
        accountId: testAccount.id,
        macAddress: '00:11:22:33:44:55',
        timestamp: Date.now()
      },
      {
        type: 'UNBLOCK_CLIENT',
        deviceId: testDevice.id,
        accountId: testAccount.id,
        macAddress: '00:11:22:33:44:55',
        timestamp: Date.now()
      },
      {
        type: 'GET_STATS',
        deviceId: testDevice.id,
        accountId: testAccount.id,
        macAddress: '00:11:22:33:44:55',
        timestamp: Date.now()
      }
    ];

    for (const command of commands) {
      console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${command.type}`);
      await kafkaService.sendMessage(config.kafka.topics.mikrotikCommands, command);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ (10 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
    const commandMonitor = consumer.getCommandMonitor();
    const stats = commandMonitor.getCommandStats();
    const activeCommands = commandMonitor.getActiveCommands();

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:', stats);
    console.log('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', activeCommands.length);

    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    try {
      await consumer.stop();
      await kafkaService.disconnect();
      await prisma.$disconnect();
      console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testKafkaIntegration()
    .then(() => {
      console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { testKafkaIntegration };